'xmlExport: 

Option Explicit

'   Copyright [2012] [ Olav Alexander Mjelde / Bergen Byarkiv ]

'   Licensed under the Apache License, Version 2.0 (the "License");
'   you may not use this file except in compliance with the License.
'   You may obtain a copy of the License at

'       http://www.apache.org/licenses/LICENSE-2.0

'   Unless required by applicable law or agreed to in writing, software
'   distributed under the License is distributed on an "AS IS" BASIS,
'   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
'   See the License for the specific language governing permissions and
'   limitations under the License.

'# Constants	
Const cstVersion = "1.1"
Const cstVersionDate = "2012-11-05"
Const cstVersionAuthor = "Olav Alexander Mjelde"
Const cstVersionAuthorOrg = "Bergen byarkiv"
Const cstVersionAuthorEmail = "olav.mjelde@bergen.kommune.no"

'# Declare variables
'# Declare variables
Dim strTab, strNewLine, strForceFeed As String 
Dim uidoc As NotesUIDocument

Dim db As NotesDatabase
Dim doc As NotesDocument
Dim stream As NotesStream
Dim exporter As NotesDXLExporter
Dim col As NotesDocumentCollection
Dim dc As NotesDocumentCollection
Dim numFiles, numDocs, numErr, n, k, numFilesSaved As Integer
Dim CurrID As Long     
Dim attachment As NotesEmbeddedObject
Dim arrAttachmentNames, allFieldNames, result As Variant
Dim strErrors, attachmentName, filename As String      
Dim exportTarget, xmlFolder, dxlFolder, attachmentFolder, logFolder, projectPath, txtFolder, strSavedTxt As String
Dim strErrorLogName, strResultsLogName, strExportLogName, strRecordsTxt, strAttachmentTxt, strErrorTxt, strRecordsetTxt As String
Dim exportXML11, exportXML, exportTXT11, exportTXT, exportDXL, exportAttachments, exportEmptyTags As Boolean
Dim strInTxt, strOnLineTxt As String

Sub Initialize
	Dim session As New NotesSession
	
'##################### MUST SET THIS ##########################
'# 										Root export folder												#
'#############################################################
	exportTarget = |D:\Byarkiv\Eksport2\|   	'For instance "D:\\Byarkiv\\Eksport\\" (remember trailing)
	
'#################### SHOULD SET THIS #########################
'#									  Which formats to export 									     #
'############################################################
'# These apply to 99% of the users
	exportXML = True 					' Set to true if you want 1 XML per database		- rec.: True
	exportTXT = True					' Set to true if you want 1 TXT per database		- rec.: True
	exportDXL	 = False					' Dump db to DXL (FULL XML DUMP) 			- rec.: True
	
'# These apply for 1% of the users (much more work in the following migration steps)  	
	exportTXT11 = False				' Set to true if you want 1 TXT per document 		- rec.: False
	exportXML11	= False 				' Set to true if you want 1 XML per document 	- rec.: False	
	
'# Export empty tags? 
	exportEmptyTags = True			' Huge dumps may need this set to false			- rec.: True
	exportAttachments = True		' Your files/attachments, if any in the db.			- rec.: True
'###################### CAN SET THIS ##########################
'#					   			   	     Name of subfoders    									         #
'############################################################
'# Sub export folders - NO SLASHES!
	xmlFolder = |xml|								' For XML files 
	txtFolder = |txt|									' For TXT files
	dxlFolder = |dxl|									' For DXL dump of db
	attachmentFolder = |filer|					' For attachments / files
	logFolder = |logg|								' For logs (error and result)
	
'###################### CAN SET THIS ##########################
' #			 Here you can modify the script for language, filenames, etc.			    # 
' #			 Please do not use any slashes 			   			   							   # 
' ###########################################################
'# Logging, file names, no extensions!
	strErrorLogName = |avvik|					' The error log file name "error" (will only log when errors>0)
	strResultsLogName = |resultater|			' The results log file name "results" (will log documents, attachments and number of errors)
	strExportLogName = |instillinger|			' The export settings log file name, will log boolean values,etc.
'# Logging, field names	
	strRecordsTxt = |r|				' The text for rootdocuments in the log file, also used in the XML "record" ( DO NOT CALL THIS DOCUMENT or Document!)  
	strRecordsetTxt = |rs|				' The text for rootdocuments in the log file, also used in the XML "record" ( DO NOT CALL THIS DOCUMENT or Document!)  
	strAttachmentTxt = |Filer|						' The text for Attachments/files in the log file "Files"
	strSavedTxt = |Filer Lagret|							' The text for "Files Saved" 
	strErrorTxt = |Feil|								' The text for Error in the log file "Errors"
	strOnLineTxt = |på linje|						' For error logging "on line"
	strInTxt = |i|										' For error logging "in" (error in)
	
'##########################################################
'######## 			No configuration below this part  					   ########
'##########################################################
'######## Only self perceived experts should edit below this line ########
'##########################################################
	
	
	
	
'# Set database and get documents collection
	Set db = session.CurrentDatabase
	Set col = db.UnprocessedDocuments
	
'#  Counters for logging, etc.
	numFilesSaved = 0	
	numFiles = 0
	numErr = 0
	numDocs = 0		
	
	' Set the tab, the newline and forcefeed
	strTab = Chr$(9)
	strNewLine = Chr$(10)
	strForceFeed = Chr$(12)
	
'# Open xml file named after current database
	Set stream = session.CreateStream
	
	On Error Goto ErrorHandler 
	
	Dim thisAgent As NotesAgent     
	Set thisAgent = session.CurrentAgent            
	projectPath = exportTarget & Left(db.FileName, Len(db.FileName) - 4) ' remove extension and . (dot)
	result = makeFolders()
	
	
	
'#  Let's start by printing the settings log. If the script fails, this is a good place to start the debug :-)	
	result = printSettingsLog()
	
	
	
	
        ' This is for the DXL dump
	If exportDXL Then
		fileName$ =  projectPath + |\| + dxlFolder + |\| + Left(db.FileName, Len(db.FileName) - 3) + |dxl|
		
	        ' TODO: Consider commenting out this code and check if it's needed (after all, we have the error checking)
		If Not stream.Open(fileName$, "UTF-8") Then
			'Messagebox |Cannot open | + fileName$ + |Error|
			Exit Sub
		End If
		Call stream.Truncate
		
	'# Export current database as DXL
		Set exporter = session.CreateDXLExporter
	'# Set the input for the exporter
		Call exporter.SetInput(col)
	'# Set the output for the exporter
		Call exporter.SetOutput(stream)
	'# kick off the exporter process
		Call exporter.Process
	End If
'# Get documents for loop
	Set dc = db.AllDocuments
	Set doc = dc.GetFirstDocument   
	
	CurrID = 100000	' Just a counter to get unique names
	If exportXML Then  ' if set to export xml (combined)	
		Open projectPath + |\| + xmlFolder + |\| + Left(db.FileName, Len(db.FileName) - 4) + |.xml| For Output As 3 ' large XML
		Print #3, |<?xml version="1.0"  encoding="UTF-8"?>|		
		Print #3, |<| + strRecordsetTxt + |>|		
	End If
	If exportTXT Then  ' if set to export txt (combined)	
		Open projectPath + |\| + txtFolder + |\| + Left(db.FileName, Len(db.FileName) - 4) + |.txt| For Output As 4 ' large TXT
	End If
	
	
	While Not doc Is Nothing
		numDocs = numDocs + 1
		
		If exportXML11 Then ' if set to export 1:1 xml (loose)		
			Open projectPath + |\| + xmlFolder + |\1\| + Cstr(CurrID) + |.xml| For Output As 1 ' 1:1 XML
			Print #1, |<?xml version="1.0" encoding="UTF-8"?>|	
			Print #1, strTab + |<| + strRecordsTxt + | id="| +  Cstr(CurrID) + |">|
		End If		
		
		If exportTXT11 Then  ' if set to export 1:1 txt (loose)	
			Open projectPath + |\| + txtFolder + |\1\| + Cstr(CurrID) + |.txt| For Output As 2 ' 1:1 TXT
			Print #2, strRecordsTxt + |:| + strTab + Cstr(CurrID)
		End If
		
		If exportXML Then ' if set to export  xml (combined)		
			Print #3, strTab + |<| + strRecordsTxt + | id="| +  Cstr(CurrID) + |">|
		End If
		
		If exportTXT Then  ' if set to export txt (combined)		
			Print #4, strRecordsTxt + |:| + strTab + Cstr(CurrID)
		End If
		
		' find attachments
		arrAttachmentNames = Evaluate("@AttachmentNames", doc)
		For n = 0 To Ubound( arrAttachmentNames )
			
			If arrAttachmentNames(n) Like "*.*"  Then			' Is file
				Set attachment = doc.GetAttachment(arrAttachmentNames(n) )
				
				fileName=Cstr(CurrID)+"-"+arrAttachmentNames(n)
				
				If exportXML11 Then ' if set to export 1:1 xml (loose)				
					Print #1, strTab & strTab & |<| & strAttachmentTxt  & |>| & fileName & |</| & strAttachmentTxt & |>|
				End If				
				
				If exportXML Then  ' if set to export xml (combined)				
					Print #3, strTab & strTab & |<| & strAttachmentTxt  & |>| & fileName & |</| & strAttachmentTxt & |>|			
				End If
				
				If exportTXT11 Then  ' if set to export 1:1 txt (loose)				
					Print #2, strAttachmentTxt  & |:| & strTab & fileName
				End If
				
				If exportTXT Then  ' if set to export txt (combined)				
					Print #4, strAttachmentTxt  & |:| & strTab & fileName
				End If
				
				' Extract file
				If exportAttachments Then  ' if set to export attachments (files)				
					Call    attachment.ExtractFile( projectPath & "\" & attachmentFolder & "\" & fileName)
					numFilesSaved = numFilesSaved + 1 ' Count files extracted
				End If
				numFiles = numFiles + 1 ' Count files even if not extracted
			End If
			
		Next n
		
		allFieldNames = Evaluate("@DocFields", doc)
		For k = 0 To Ubound( allFieldNames )
			
			If Not Isempty(doc.GetItemValue(allFieldNames(k))) Then ' if the field has data
				If exportXML11 Then  ' if set to export 1:1 xml (loose)				
					Print #1, strTab & strTab &  |<| & Replace(allFieldNames(k), "$", "")  & |>| & doc.GetItemValue(allFieldNames(k))(0)&|</| &  Replace(allFieldNames(k), "$", "")  & |>|
				End If
				If exportXML Then  ' if set to export xml (combined)				
					Print #3, strTab & strTab &  |<| &  Replace(allFieldNames(k), "$", "")  & |>| & doc.GetItemValue(allFieldNames(k))(0)&|</| &  Replace(allFieldNames(k), "$", "")  & |>|
				End If
				If exportTXT11 Then  ' if set to export 1:1 txt (loose)				
					Print #2,  Replace(allFieldNames(k), "$", "")  & |:| & strTab & doc.GetItemValue(allFieldNames(k))(0)
				End If
				If exportTXT Then  ' if set to export txt (combined)				
					Print #4,  Replace(allFieldNames(k), "$", "")  & |:| & strTab & doc.GetItemValue(allFieldNames(k))(0)
				End If
			Else  ' if field has no data				
				If (exportEmptyTags) Then  ' if set to export empty tags (fields with no data)   
					If exportXML11 Then	 ' if set to export 1:1 xml (loose)				
						Print #1, strTab & strTab & |<| &  Replace(allFieldNames(k), "$", "")  & |></| &  Replace(allFieldNames(k), "$", "")  & |>|			
					End If
					If exportXML Then  ' if set to export xml (combined)				
						Print #3, strTab & strTab & |<| &  Replace(allFieldNames(k), "$", "")  & |></| &  Replace(allFieldNames(k), "$", "")  & |>|	
					End If
					If exportTXT11 Then  ' if set to export 1:1 txt (loose)				
						Print #2,  Replace(allFieldNames(k), "$", "")  & |:|
					End If
					If exportTXT Then  ' if set to export txt (combined)				
						Print #4,  Replace(allFieldNames(k), "$", "")  & |:|
					End If
				End If
			End If
			
		Next k
		
'#  Close XML and txt for the 1:1 files, the combined gets closed outside the loop
		If exportXML11 Then  ' if set to export 1:1 xml (loose)				
			Print #1, strTab & |</| & strRecordsTxt  & |>|	
			Print #1, |</xml>|	
			Close #1
		End If
		If exportTXT11 Then  ' if set to export 1:1 txt (loose)	
			Print #2, strTab & |</| & strRecordsTxt  & |>|	
			Print #2, strForceFeed
			Close #2			
		End If		
		If exportXML Then   ' if set to export xml (combined)		
			Print #3, strTab & |</| & strRecordsTxt  & |>|	
		End If
		
		Set doc = dc.GetNextDocument( doc )
		CurrID = CurrID + 1
	Wend
	
	If exportXML Then   ' if set to export xml (combined)		
		Print #3, |</| + strRecordsetTxt + |>|	
		Print #3, |</xml>|
		Close #3
	End If
	
	If exportTXT Then ' if set to export txt (combined)		
		Close #4
	End If
	
'# Print results log
	result = printResultsLog()
	
'#  Error logfile, only printed when an error arises
	If numErr > 0 Then
		result=printErrorLog()
	End If
	
Done: 
	Exit Sub ' Skip  ErrorHanlder - if successfull
ErrorHandler: 
	Select Case Err                 
	Case Else 		
'## Log and count Errors s
		numErr = numErr + 1
		strErrors = strErrors + strNewLine + strTab + strTab + |<| + strErrorTxt + |>| + Cstr(Err) + | | + strInTxt + | | + Cstr(thisAgent.Name) + | | + strOnLineTxt + |  | + Cstr(Erl) + |: | + Cstr(Error) +|</| + strErrorTxt + |>|		
		Resume Done                                                             
	End Select 
	
End Sub
Public Function printSettingsLog()
		'# Settings logfile	
	' The thought behind this is that one can send this file if a problem arises or someone else wishes to use the same parameters
	Open  projectPath + |\| + logFolder + |\| + strExportLogName + |.xml| For Output As 1
	Print #1, |<?xml version="1.0" standalone="yes"?>|	
	Print #1, strTab + |<settings scriptVersion="| + cstVersion  + |" versionDate="|  + cstVersionDate  + |" Author="| + cstVersionAuthor   + |" AuthorOrg="| + cstVersionAuthorOrg + |" authorEmail="| + cstVersionAuthorEmail + |">|
	Print #1, strTab + strTab + |<export workfolder="| + exportTarget + |">|
	Print #1,  strTab + strTab + strTab + |<dxl file="combined" target="|  + dxlFolder  + |\">| + Cstr(exportDXL) + |</dxl>|
	Print #1,  strTab + strTab + strTab + |<xml file="combined" target="| + xmlFolder  + |\">|  + Cstr(exportXML) + |</xml>|
	Print #1,  strTab + strTab + strTab + |<xml file="loose" target="| + xmlFolder  + |\1\">|  + Cstr(exportXML11) + |</xml>|
	Print #1,  strTab + strTab + strTab + |<txt file="combined" target="| + txtFolder  + |\">|  + Cstr(exportTXT) + |</txt>|
	Print #1,  strTab + strTab + strTab + |<txt file="loose" target="| + txtFolder  + |\1\">|  + Cstr(exportTXT11) + |</txt>|
	Print #1,  strTab + strTab + strTab + |<attachments file="loose"  target="| + attachmentFolder  + |\">| + Cstr(exportAttachments) + |</attachments>|	
	Print #1,  strTab + strTab + strTab + |<log file="combined" type="error" name="| + strErrorLogName + |.xml" target="| + logFolder  + |\">True</log>|
	Print #1,  strTab + strTab + strTab + |<log file="combined" type="results" name="| + strResultsLogName + |.xml" target="| + logFolder  + |\">True</log>|
	Print #1,  strTab + strTab + strTab + |<log file="combined" type="exportsettings" name="| + strExportLogName + |.xml" target="| + logFolder  + |\">True</log>|
	Print #1, strTab + strTab + |</export>|
	
	Print #1, strTab + strTab +|<globalization>|	
	Print #1,  strTab + strTab + strTab  + |<recordsTxt>| + strRecordsTxt + |</recordsTxt>|
	Print #1,  strTab + strTab + strTab  + |<attachmentTxt>| + strAttachmentTxt + |</attachmentTxt>|
	Print #1,  strTab + strTab + strTab  + |<errorTxt>| + strErrorTxt + |</errorTxt>|
	Print #1,  strTab + strTab + strTab  + |<onLineTxt>| + strOnLineTxt + |</onLineTxt>|
	Print #1,  strTab + strTab + strTab  + |<inTxt>| + strInTxt + |</inTxt>|
	Print #1,  strTab + strTab + strTab  + |<savedTxt>| + strSavedTxt + |</savedTxt>|
	Print #1, strTab + strTab +|</globalization>|	
	
	Print #1, strTab + strTab +|<tags>|	
	Print #1,  strTab + strTab + strTab  + |<printempty>| + Cstr(exportEmptyTags) + |</printempty>|
	Print #1, strTab + strTab +|</tags>|		
	
	Print #1, strTab + |</settings>|
	Print #1, |</xml>|	
	Close #1
End Function
Public Function printResultsLog()
		'# Results file, this logs the count of documents, attachments and errors. It also displays version name of the script
	Open  projectPath + |\| + logFolder + |\| + strResultsLogName + |.xml| For Output As 1
	Print #1, |<?xml version="1.0" standalone="yes"?>|	
	Print #1, strTab + |<| + strResultsLogName + | scriptVersion="| + cstVersion  + |" versionDate="|  + cstVersionDate  + |" Author="| + cstVersionAuthor   + |" AuthorOrg="| + cstVersionAuthorOrg + |" authorEmail="| + cstVersionAuthorEmail + |">|
	Print #1, strTab + strTab + |<| + strRecordsTxt + |>| + Cstr(numDocs) + |</| + strRecordsTxt + |>|
	Print #1,  strTab + strTab  + |<| + strAttachmentTxt + |>| +  Cstr(numFiles) + |</| + strAttachmentTxt + |>|
	Print #1,  strTab + strTab  + |<| + strSavedTxt + |>| +  Cstr(numFilesSaved) + |</| + strSavedTxt + |>|
	Print #1,  strTab + strTab  + |<| + strErrorTxt + |>| +  Cstr(numErr) + |</| + strErrorTxt + |>|
	Print #1, strTab + |</| + strResultsLogName + |>|
	Print #1, |</xml>|	
	Close #1
End Function
Public Function printErrorLog()
	Open  projectPath + |\| + logFolder + |\| + strErrorLogName  +  |.xml| For Output As 1
	Print #1, |<?xml version="1.0" encoding="UTF-8"?>|		
	Print #1, "" + strErrors +""
	Print #1, |</xml>|
	Close #1
End Function
Public Function makeFolders()
 '#  Make folders for data extraction
	Mkdir  projectPath														' Root folder for export
	Mkdir  projectPath + |\| + logFolder + |\|							' Log subfolder	
	
	If exportDXL Then
		Mkdir  projectPath + |\| + dxlFolder + |\|						' DXL subfolder
	End If
	If exportAttachments Then
		Mkdir  projectPath + |\| + attachmentFolder + |\|			' Attachment subfolder
	End If
	
	If exportXML Or exportXML11 Then	
		Mkdir  projectPath + |\| + xmlFolder + |\|					' XML subfolder
		If exportXML11 Then
			Mkdir  projectPath + |\| + xmlFolder + |\1\| 				' XML subfolder
		End If
	End If
	If exportTXT Or exportTXT11 Then
		Mkdir  projectPath + |\| + txtFolder + |\|						' TXT subfolder
		If exportTXT11 Then
			Mkdir  projectPath + |\| + txtFolder + |\1\|
		End If
	End If
End Function

